//coverage:ignore file

// Code generated by MockGen. DO NOT EDIT.
// Source: payment/payment.go

// Package payment is a generated GoMock package.
package payment

import (
	data "github.com/companieshouse/payment-reconciliation-consumer/data"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockFetcher is a mock of Fetcher interface
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// GetPayment mocks base method
func (m *MockFetcher) GetPayment(paymentAPIURL string, HTTPClient *http.Client, apiKey string) (data.PaymentResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", paymentAPIURL, HTTPClient, apiKey)
	ret0, _ := ret[0].(data.PaymentResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPayment indicates an expected call of GetPayment
func (mr *MockFetcherMockRecorder) GetPayment(paymentAPIURL, HTTPClient, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockFetcher)(nil).GetPayment), paymentAPIURL, HTTPClient, apiKey)
}

// GetPaymentDetails mocks base method
func (m *MockFetcher) GetPaymentDetails(paymentAPIURL string, HTTPClient *http.Client, apiKey string) (data.PaymentDetailsResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentDetails", paymentAPIURL, HTTPClient, apiKey)
	ret0, _ := ret[0].(data.PaymentDetailsResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaymentDetails indicates an expected call of GetPaymentDetails
func (mr *MockFetcherMockRecorder) GetPaymentDetails(paymentAPIURL, HTTPClient, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentDetails", reflect.TypeOf((*MockFetcher)(nil).GetPaymentDetails), paymentAPIURL, HTTPClient, apiKey)
}

// GetLatestRefundStatus mocks base method
func (m *MockFetcher) GetLatestRefundStatus(paymentAPIURL string, HTTPClient *http.Client, apiKey string) (*data.RefundResource, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRefundStatus", paymentAPIURL, HTTPClient, apiKey)
	ret0, _ := ret[0].(*data.RefundResource)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestRefundStatus indicates an expected call of GetLatestRefundStatus
func (mr *MockFetcherMockRecorder) GetLatestRefundStatus(paymentAPIURL, HTTPClient, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRefundStatus", reflect.TypeOf((*MockFetcher)(nil).GetLatestRefundStatus), paymentAPIURL, HTTPClient, apiKey)
}
