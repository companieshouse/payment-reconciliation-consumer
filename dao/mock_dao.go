// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package mock_dao is a generated GoMock package.
package dao

import (
	models "github.com/companieshouse/payment-reconciliation-consumer/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDAO is a mock of DAO interface
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// CreateEshuResource mocks base method
func (m *MockDAO) CreateEshuResource(dao *models.EshuResourceDao) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEshuResource", dao)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEshuResource indicates an expected call of CreateEshuResource
func (mr *MockDAOMockRecorder) CreateEshuResource(dao interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEshuResource", reflect.TypeOf((*MockDAO)(nil).CreateEshuResource), dao)
}

// CreatePaymentTransactionsResource mocks base method
func (m *MockDAO) CreatePaymentTransactionsResource(dao *models.PaymentTransactionsResourceDao) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentTransactionsResource", dao)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePaymentTransactionsResource indicates an expected call of CreatePaymentTransactionsResource
func (mr *MockDAOMockRecorder) CreatePaymentTransactionsResource(dao interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentTransactionsResource", reflect.TypeOf((*MockDAO)(nil).CreatePaymentTransactionsResource), dao)
}
